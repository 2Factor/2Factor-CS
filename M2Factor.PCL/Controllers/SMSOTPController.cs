/*
 * M2Factor.PCL
 *
 * This file was automatically generated for 2Factor by APIMATIC BETA v2.0 on 02/18/2016
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using APIMATIC.SDK.Common;
using APIMATIC.SDK.Http.Request;
using APIMATIC.SDK.Http.Response;
using APIMATIC.SDK.Http.Client;
using SolvTech.Models;

namespace SolvTech.Controllers
{
    public partial class SMSOTPController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static SMSOTPController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static SMSOTPController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new SMSOTPController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// This endpoint is used to check SMS OTP balance
        /// </summary>
        /// <param name="apiKey">Required parameter: API Obtained From 2Factor.in</param>
        /// <return>Returns the CheckSmsBalanceModel response from the API call</return>
        public async Task<CheckSmsBalanceModel> GetCheckSMSBalanceAsync(
                string apiKey)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/API/V1/{api_key}/BAL/SMS");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "api_key", apiKey }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "2Factor" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<CheckSmsBalanceModel>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// This endpoint is used to send Auto Generated SMS OTP to India
        /// </summary>
        /// <param name="apiKey">Required parameter: API Obtained From 2Factor.in</param>
        /// <param name="phoneNumber">Required parameter: 10 Digit Indian Phone Number</param>
        /// <return>Returns the SendingSmsOtpAutoGeneratedOtpModel response from the API call</return>
        public async Task<SendingSmsOtpAutoGeneratedOtpModel> GetSendingSMSOTPAutoGeneratedOTPAsync(
                string apiKey,
                string phoneNumber)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/API/V1/{api_key}/SMS/{phone_number}/AUTOGEN");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "api_key", apiKey },
                { "phone_number", phoneNumber }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "2Factor" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<SendingSmsOtpAutoGeneratedOtpModel>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// This endpoint is used to send Custom SMS OTP to India
        /// </summary>
        /// <param name="apiKey">Required parameter: API Obtained From 2Factor.in</param>
        /// <param name="otp">Required parameter: 4-6 Digit ( Numeric ) OTP code to be sent</param>
        /// <param name="phoneNumber">Required parameter: 10 Digit Indian Phone Number</param>
        /// <return>Returns the SendingSmsOtpModel response from the API call</return>
        public async Task<SendingSmsOtpModel> GetSendingSMSOTPCustomOTPAsync(
                string apiKey,
                string otp,
                string phoneNumber)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/API/V1/{api_key}/SMS/{phone_number}/{otp}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "api_key", apiKey },
                { "otp", otp },
                { "phone_number", phoneNumber }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "2Factor" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<SendingSmsOtpModel>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

        /// <summary>
        /// This endpoint is useful in verifying user entered OTP with sent OTP
        /// </summary>
        /// <param name="apiKey">Required parameter: API Obtained From 2Factor.in</param>
        /// <param name="otpInput">Required parameter: OTP Value input by end user</param>
        /// <param name="sessionId">Required parameter: Verification session id returned in send OTP step</param>
        /// <return>Returns the VerifyOtpInputModel response from the API call</return>
        public async Task<VerifyOtpInputModel> GetVerifySMSOTPInputAsync(
                string apiKey,
                string otpInput,
                string sessionId)
        {
            //the base uri for api requestss
            string _baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/API/V1/{api_key}/SMS/VERIFY/{session_id}/{otp_input}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "api_key", apiKey },
                { "otp_input", otpInput },
                { "session_id", sessionId }
            });

            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "2Factor" },
                { "accept", "application/json" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<VerifyOtpInputModel>(_response.Body);
            }
            catch (Exception ex)
            {
                throw new APIException("Failed to parse the response: " + ex.Message, _context);
            }
        }

    }
} 